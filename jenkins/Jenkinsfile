def install_test_dependencies() {
  echo 'installing test dependencies'
  sh """#!/bin/bash
    ~/venv/bin/pip install -r dev-requirements.txt
    ~/venv/bin/pip install -r test-requirements.txt
    ~/venv/bin/pip install -e .
  """
}
def pytest(){
  echo 'running pytest'
  sh '''
    ~/venv/bin/pytest \
      --cov-report term-missing \
      --cov=cloudify_cli \
      cloudify_cli/tests \
      --junitxml=test-results/cloudify_cli.xml
  '''
}

def doGetVersion(){
  sh(script: '''#!/bin/sh -e
    . cloudify-cli/packaging/version_info
    echo ${CLOUDIFY_VERSION}
  ''', label: 'get package version', returnStdout: true).trim()
}

def doGetPreRelease(){
  sh(script: '''#!/bin/sh -e
    . cloudify-cli/packaging/version_info
    echo ${CLOUDIFY_PACKAGE_RELEASE}
  ''', label: 'get package release', returnStdout: true).trim()
}


@Library('pipeline-shared-library') _
pipeline {
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }

  options {
    checkoutToSubdirectory('cloudify-cli')
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }
  environment {
    PATH = "/root/.local/bin:$PATH"
    PROJECT = 'cloudify-cli'
    WORKSPACE = "${env.WORKSPACE}"
    PROJECT_DIR = "${env.WORKSPACE}/project"
    BUILD_DIR = "/tmp/build"
    RESULT_DIR = "/tmp/result"
    CLOUDIFY_PACKAGE_RELEASE = doGetPreRelease()
    CLOUDIFY_VERSION = doGetVersion()
    S3_BASE_URL = "${env.CLOUDIFY_VERSION}/${env.CLOUDIFY_PACKAGE_RELEASE}-build/${env.PROJECT}/${env.BRANCH_NAME}"
    S3_BUILD_PATH = "${env.S3_BASE_URL}/${env.BUILD_NUMBER}"
    S3_LATEST_BUILD_PATH = "${env.S3_BASE_URL}/latest"
  }

  stages {
    stage('flake8, build rpm and deb-build') {
      parallel {
        stage('flake8') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to separate workspace"
            container('py311') {
              dir("${env.WORKSPACE}/flake8") {
                echo 'Install and run flake8'
                sh '''
                  pip install flake8 --user
                  flake8 cloudify_cli
                '''
              }
            }
          }
        }
        stage('build-rpm') {
          steps {
            container('rpmbuild') {
              echo 'Copying repo to separate workspace'
              sh """
                cd ~/rpmbuild
                git clone --single-branch --branch ${env.BRANCH_NAME} https://github.com/cloudify-cosmo/cloudify-cli.git SOURCES && cd SOURCES
              """
              echo 'building dependencies and rpm'
              buildRpm('~/rpmbuild/SOURCES', 'cloudify-cli.spec', "${env.CLOUDIFY_VERSION}", "${env.CLOUDIFY_PACKAGE_RELEASE}", "7", "x86_64")
              sh script:("mkdir -p ${env.WORKSPACE}/rpm_artifacts && cp -rf /root/rpmbuild/RPMS/x86_64/. ${env.WORKSPACE}/rpm_artifacts"), label: "Copy RPM to rpm_artifacts folder"
            }
          }
          post {
            success {
              uploadToReleaseS3("${env.WORKSPACE}/rpm_artifacts/","${env.S3_BUILD_PATH}")
              uploadToReleaseS3("${env.WORKSPACE}/rpm_artifacts/","${env.S3_LATEST_BUILD_PATH}")
              archiveArtifacts '**/rpm_artifacts/*.rpm'
            }
          }
        }
        stage('build-deb') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/project && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/project", label: "copying repo to separate workspace"
            container('debbuild') {
              sh script: 'mkdir /tmp/result', label: "create result folder"
              sh script: "/bin/bash ${env.WORKSPACE}/project/packaging/debian/build.sh", label: "build the deb package"
              sh script: """
                set -ex
                rm -rf /opt/cfy
                dpkg -i /tmp/result/*.deb
                cfy --version
              """, label: "sanity-test the deb package"
              sh script:("mkdir -p ${env.WORKSPACE}/deb_artifacts && cp -rf /tmp/result/*.deb ${env.WORKSPACE}/deb_artifacts"), label: "Copy RPM to deb_artifacts folder"
            }
          }
          post {
            success {
              uploadToReleaseS3("${env.WORKSPACE}/deb_artifacts/","${env.S3_BUILD_PATH}")
              uploadToReleaseS3("${env.WORKSPACE}/deb_artifacts/","${env.S3_LATEST_BUILD_PATH}")
              archiveArtifacts '**/deb_artifacts/*.deb'
            }
          }
        }
      }
    }
    stage('tests') {
      steps {
        sh script: "mkdir -p ${env.WORKSPACE}/test_py311 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test_py311", label: "copying repo to separate workspace"
        container('py311') {
          dir("${env.WORKSPACE}/test_py311") {
            echo 'create virtual env'
            sh 'virtualenv ~/venv'
            install_test_dependencies()
            pytest()
          }
        }
      }
      post {
        always {
          junit '**/test-results/*.xml'
        }
      }
    }
  }
}
