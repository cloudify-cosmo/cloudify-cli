def install_test_dependencies() {
  echo 'installing test dependencies'
  sh """#!/bin/bash
    ~/venv/bin/pip install -r dev-requirements.txt
    ~/venv/bin/pip install -r test-requirements.txt
    ~/venv/bin/pip install -e .
  """
}
def pytest(){
  echo 'running pytest'
  sh '''
    ~/venv/bin/pytest \
      --cov-report term-missing \
      --cov=cloudify_cli \
      cloudify_cli/tests \
      --junitxml=test-results/cloudify_cli.xml
  '''
}

@Library('pipeline-shared-library') _
pipeline {
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }

  options {
    checkoutToSubdirectory('cloudify-cli')
    buildDiscarder(logRotator(numToKeepStr:'10'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }
  environment {
    PATH = "/root/.local/bin:$PATH"
    PROJECT = 'cloudify-cli'
    WORKSPACE = "${env.WORKSPACE}"
    PROJECT_DIR = "${env.WORKSPACE}/project"
    BUILD_DIR = "/tmp/build"
    RESULT_DIR = "/tmp/result"
    CLOUDIFY_PACKAGE_RELEASE = getPreRelease("${env.PROJECT}", "${env.BRANCH_NAME}").trim()
    CLOUDIFY_VERSION = getVersion("${env.PROJECT}", "${env.BRANCH_NAME}").trim()
    S3_BASE_URL = "${env.CLOUDIFY_VERSION}/${env.CLOUDIFY_PACKAGE_RELEASE}-build/${env.PROJECT}/${env.BRANCH_NAME}"
    S3_BUILD_PATH = "${env.S3_BASE_URL}/${env.BUILD_NUMBER}"
    S3_LATEST_BUILD_PATH = "${env.S3_BASE_URL}/latest"
  }

  stages {
    stage('flake8, build rpm and deb-build') {
      parallel {
        stage('flake8_py27') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"
            container('py27') {
              dir("${env.WORKSPACE}/flake8") {
                echo 'Install and run flake8'
                sh '''
                  pip install flake8 --user
                  flake8 cloudify_cli
                '''
              }
            }
          }
        }
        stage('flake8_py36') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/flake8 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/flake8", label: "copying repo to seperate workspace"
            container('py36') {
              dir("${env.WORKSPACE}/flake8") {
                echo 'Install and run flake8'
                sh '''
                  pip install flake8 --user
                  flake8 cloudify_cli
                '''
              }
            }
          }
        }
        stage('build-rpm') {
          steps {
            container('rpmbuild') {
              echo 'Copying repo to seperate workspace'
              sh """
                cd && mkdir rpmbuild && cd rpmbuild
                git clone --single-branch --branch ${env.BRANCH_NAME} https://github.com/cloudify-cosmo/cloudify-cli.git SOURCES && cd SOURCES
              """
              echo 'Installing setup tools'
              sh """
                yum install python-setuptools -y
                chmod a+wx /opt
              """
              sh script:"""
                cd ~/rpmbuild/SOURCES
                yum install rpmdevtools -y
                for i in {1..30}; do yum-builddep -y packaging/cloudify-cli.spec && break || sleep 10; done

                spectool \
                  -d "CLOUDIFY_VERSION ${env.CLOUDIFY_VERSION}" \
                  -d "CLOUDIFY_PACKAGE_RELEASE ${env.CLOUDIFY_PACKAGE_RELEASE}" \
                  -P packaging/cloudify-cli.spec \
                  -S -g

                rpmbuild \
                  -D "CLOUDIFY_VERSION ${env.CLOUDIFY_VERSION}" \
                  -D "CLOUDIFY_PACKAGE_RELEASE ${env.CLOUDIFY_PACKAGE_RELEASE}" \
                  -D "dist .el7" \
                  -bb packaging/cloudify-cli.spec

              """, label: "building dependencies and rpm"
              sh script:("mkdir -p ${env.WORKSPACE}/rpm_artifacts && cp -rf /root/rpmbuild/RPMS/x86_64/. ${env.WORKSPACE}/rpm_artifacts"), label: "Copy RPM to rpm_artifacts folder"
            }
          }
          post {
            success {
              uploadToReleaseS3("${env.WORKSPACE}/rpm_artifacts/","${env.S3_BUILD_PATH}")
              uploadToReleaseS3("${env.WORKSPACE}/rpm_artifacts/","${env.S3_LATEST_BUILD_PATH}")
              archiveArtifacts '**/rpm_artifacts/*.rpm'
            }
          }
        }
        stage('build-deb') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/project && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/project", label: "copying repo to seperate workspace"
            container('debbuild') {
              sh script: 'mkdir /tmp/result', label: "create result folder"
              echo 'install python setup tools'
              sh'''
                set -ex
                apt-get update
                apt-get install python3 python3-setuptools python3-distutils -y
              '''
              sh script: "/bin/bash ${env.WORKSPACE}/project/packaging/debian/build.sh", label: "build the deb package"
              sh script: """
                set -ex
                rm -rf /opt/cfy
                dpkg -i /tmp/result/*.deb
                cfy --version
              """, label: "sanity-test the deb package"
              sh script:("mkdir -p ${env.WORKSPACE}/deb_artifacts && cp -rf /tmp/result/*.deb ${env.WORKSPACE}/deb_artifacts"), label: "Copy RPM to deb_artifacts folder"
            }
          }
          post {
            success {
              uploadToReleaseS3("${env.WORKSPACE}/deb_artifacts/","${env.S3_BUILD_PATH}")
              uploadToReleaseS3("${env.WORKSPACE}/deb_artifacts/","${env.S3_LATEST_BUILD_PATH}")
              archiveArtifacts '**/deb_artifacts/*.deb'
            }
          }
        }
      }
    }
    stage('pytests') {
      parallel {
        stage('test_py27') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/test_py27 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test_py27", label: "copying repo to seperate workspace"
            container('py27') {
              dir("${env.WORKSPACE}/test_py27") {
                echo 'create virtual env'
                sh 'virtualenv ~/venv'
                install_test_dependencies()
                pytest()
              }
            }
          }
          post {
            always {
              junit '**/test-results/*.xml'
            }
          }
        }
        stage('test_py36') {
          steps {
            sh script: "mkdir -p ${env.WORKSPACE}/test_py36 && cp -rf ${env.WORKSPACE}/${env.PROJECT}/. ${env.WORKSPACE}/test_py36", label: "copying repo to seperate workspace"
            container('py36') {
              dir("${env.WORKSPACE}/test_py36") {
                echo 'create virtual env'
                sh 'virtualenv ~/venv'
                install_test_dependencies()
                pytest()
              }
            }
          }
          post {
            always {
              junit '**/test-results/*.xml'
            }
          }
        }
      }
    }
  }
}